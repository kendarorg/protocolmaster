package org.kendar.http.plugins;

import com.fasterxml.jackson.core.type.TypeReference;
import org.kendar.plugins.PluginDescriptor;
import org.kendar.plugins.ProtocolPhase;
import org.kendar.plugins.ProtocolPluginDescriptor;
import org.kendar.http.utils.MimeChecker;
import org.kendar.http.utils.Request;
import org.kendar.http.utils.Response;
import org.kendar.http.utils.constants.ConstantsHeader;
import org.kendar.http.utils.constants.ConstantsMime;
import org.kendar.http.utils.Md5Tester;
import org.kendar.proxy.PluginContext;
import org.kendar.settings.GlobalSettings;
import org.kendar.settings.PluginSettings;
import org.kendar.settings.ProtocolSettings;
import org.kendar.storage.StorageItem;
import org.kendar.utils.JsonMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class ReplayPlugin extends ProtocolPluginDescriptor<Request, Response> {
    private static final Logger log = LoggerFactory.getLogger(ReplayPlugin.class);
    final JsonMapper mapper = new JsonMapper();
    final ConcurrentHashMap<Long, Long> calls = new ConcurrentHashMap<>();
    private final List<StorageItem> items = new ArrayList<>();
    private final Map<Long, String> hashes = new HashMap();

    private Path repository;
    private TypeReference<StorageItem> typeReference;
    private boolean blockExternal = true;
    private List<Pattern> matchSites;
    private HttpReplayPluginSettings settings;



    @Override
    public List<ProtocolPhase> getPhases() {
        return List.of(ProtocolPhase.PRE_CALL);
    }

    @Override
    public String getId() {
        return "replay-plugin";
    }

    @Override
    public String getProtocol() {
        return "http";
    }

    @Override
    public PluginDescriptor initialize(GlobalSettings global, ProtocolSettings protocol) {
        typeReference = new TypeReference<>() {
        };
        var recordingPath = global.getDataDir();
        setupSitesToRecord(settings.getMatchSites());
        blockExternal = settings.isBlockExternal();
        recordingPath = recordingPath.replace("{milliseconds}", Calendar.getInstance().getTimeInMillis() + "");
        repository = Path.of(recordingPath);

        if (!Files.exists(repository)) {
            try {
                Files.createDirectories(repository);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        for (var file : repository.toFile().listFiles()) {
            if (file.isDirectory()) continue;
            if (file.getName().endsWith(".json") && !file.getName().endsWith("index.json")) {
                try {
                    var item = mapper.deserialize(Files.readString(file.toPath()), StorageItem.class);
                    item.retrieveOutAs(Response.class);
                    var in = item.retrieveInAs(Request.class);
                    items.add(item);
                    String contentHash;
                    contentHash = Md5Tester.calculateMd5(in.getRequestText());
                    hashes.put(item.getIndex(), contentHash);
                } catch (IOException e) {
                    log.error("ERROR ", e);
                }
            }
        }
        return this;
    }

    private void setupSitesToRecord(List<String> recordSites) {
        this.matchSites = recordSites.stream()
                .map(s -> s.trim()).filter(s -> s.length() > 0)
                .map(s -> Pattern.compile(s)).collect(Collectors.toList());
    }


    @Override
    public boolean handle(FilterContext pluginContext, ProtocolPhase phase, Request request, Response response) {
        if (!isActive()) return false;
        if (matchSites.size() > 0) {
            var matchFound = false;
            for (var pat : matchSites) {
                if (pat.matcher(request.getHost()).matches()) {
                    matchFound = true;
                    break;
                }
            }
            if (!matchFound) {
                return false;
            }
        }
        String contentHash = Md5Tester.calculateMd5(request.getRequestText());
        if (findMatch(request, response, contentHash)) {


            log.info("REP " + request.getMethod() + " " + request.buildUrl());
            return true;
        }
        if (blockExternal) {
            response.setStatusCode(404);
            response.addHeader(ConstantsHeader.CONTENT_TYPE, ConstantsMime.TEXT);
            response.setResponseText("Page Not Found: " + request.getMethod() + " on " + request.buildUrl());
            return true;
        }
        return false;
    }

    @Override
    public void terminate() {

    }

    @Override
    public Class<?> getSettingClass() {
        return HttpReplayPluginSettings.class;
    }

    @Override
    public void setSettings(PluginSettings plugin) {
        super.setSettings(plugin);
        settings = (HttpReplayPluginSettings) plugin;
    }

    private boolean findMatch(Request request, Response response, String contentHash) {

        var matchingQuery = new AtomicInteger(0);
        var foundedIndex = new AtomicLong(-1);
        var withHost = items.stream().filter(a -> a.retrieveInAs(Request.class).getHost().equalsIgnoreCase(request.getHost())).collect(Collectors.toList());
        var parametric = new AtomicBoolean(false);
        withHost.forEach(a -> checkMatching(a, request, contentHash, matchingQuery, foundedIndex, parametric));
        if (foundedIndex.get() <= 0) {
            parametric.set(true);
            withHost.forEach(a -> checkMatching(a, request, contentHash, matchingQuery, foundedIndex, parametric));
        }
        if (foundedIndex.get() > 0) {
            if (!parametric.get()) {
                if (calls.containsKey(foundedIndex.longValue())) {
                    return false;
                }
                calls.put(foundedIndex.longValue(), foundedIndex.longValue());
            }
            var foundedResponse = items.stream().filter(a -> a.getIndex() == foundedIndex.get()).findFirst();
            if (foundedResponse.isPresent()) {
                var founded = foundedResponse.get();
                if (founded != null) {
                    var foundedClone = founded.retrieveOutAs(Response.class).copy();
                    if (parametric.get()) {
                        loadParameters(foundedResponse.get().retrieveInAs(Request.class), request, foundedClone);
                    }
                    response.setResponseText(foundedClone.getResponseText());
                    response.setHeaders(foundedClone.getHeaders());
                    response.setStatusCode(foundedClone.getStatusCode());
                    response.setMessages(foundedClone.getMessages());
                }
            }
            return true;
        }
        return false;
    }


}
